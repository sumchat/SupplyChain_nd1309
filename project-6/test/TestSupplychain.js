// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originSupplierID = accounts[1]
    const originSupplierName = "John Doe"
    const originSupplierInformation = "Yarray Valley"
    const originSourceWaterLatitude = "-38.239770"
    const originSourceWaterLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Supplier: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function disinfectItem() that allows a supplier to disinfect water", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Disinfected()
        await event.watch((err, res) => {
            eventEmitted = true
        })
      
        // Mark an item as Disinfected by calling function disinfectItem()
        await supplyChain.disinfectItem(upc, originSupplierID, originSupplierName, originSupplierInformation, originSourceWaterLatitude, originSourceWaterLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        //console.log(resultBufferOne[2])
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
       assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originSupplierID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originSupplierID, 'Error: Missing or Invalid originSupplierID')
        assert.equal(resultBufferOne[4], originSupplierName, 'Error: Missing or Invalid originSupplierName')
        assert.equal(resultBufferOne[5], originSupplierInformation, 'Error: Missing or Invalid originSupplierInformation')
        assert.equal(resultBufferOne[6], originSourceWaterLatitude, 'Error: Missing or Invalid originSourceWaterLatitude')
        assert.equal(resultBufferOne[7], originSourceWaterLongitude, 'Error: Missing or Invalid originSourceWaterLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State') 
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })  
    
    
  // 2nd Test
  it("Testing smart contract function collectItem() that allows a supplier to collect water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
      var eventEmitted = false
     supplyChain.addSupplier(originSupplierID);
    // Watch the emitted event Processed()
    var event = supplyChain.Collected()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.collectItem(upc,{from: originSupplierID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
})
 // 3rd Test
it("Testing smart contract function filteredItem() that allows a supplier to filter water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
      var eventEmitted = false
      //supplyChain.addSupplier(originSupplierID);
    // Watch the emitted event Processed()
    var event = supplyChain.Filtered()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.filterItem(upc,{from: originSupplierID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
})

// 4th Test
it("Testing smart contract function enhanceItem() that allows a supplier to enhance water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
      var eventEmitted = false
      
    // Watch the emitted event Processed()
    var event = supplyChain.Enhanced()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.enhanceItem(upc,{from: originSupplierID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
})

// 5th Test
it("Testing smart contract function packItem() that allows a supplier to pack water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false
    
    // Watch the emitted event Packed()
    var event = supplyChain.Packed()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc,{from: originSupplierID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
})

// 6th Test
it("Testing smart contract function sellItem() that allows a supplier to sell water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
      var eventEmitted = false
     
    // Watch the emitted event ForSale()
    var event = supplyChain.ForSale()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc,productPrice,{from: originSupplierID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Productprice')
})

// 7th Test
it("Testing smart contract function buyItem() that allows a distributor to buy water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false

    // Watch the emitted event Sold()
    var event = supplyChain.Sold()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    const walletValue = web3.toWei(3, "ether");
   
    // Mark an item as Sold by calling function buyItem()
    await supplyChain.buyItem(upc,{from: distributorID, value: walletValue})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
})

// 8th Test
it("Testing smart contract function shipItem() that allows a distributor to ship water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false
    supplyChain.addDistributor(distributorID);
    // Watch the emitted event Shipped()
    var event = supplyChain.Shipped()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.shipItem(upc,{from: distributorID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
})

// 9th Test
it("Testing smart contract function receiveItem() that allows a retailer to mark water received", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false

    // Watch the emitted event Shipped()
    var event = supplyChain.Received()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.receiveItem(upc)

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
})

// 10th Test
it("Testing smart contract function purchaseItem() that allows a consumer to purchase water", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Declare and Initialize a variable for event
    var eventEmitted = false

    // Watch the emitted event Shipped()
    var event = supplyChain.Purchased()
    await event.watch((err, res) => {
        eventEmitted = true
    })

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.purchaseItem(upc,{from: consumerID})

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
    assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
}) 

// 11th Test
it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)


    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID')
})

// 12th Test
it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
    const supplyChain = await SupplyChain.deployed()

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo =  await supplyChain.fetchItemBufferTwo(upc)

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
    assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
})  

});

